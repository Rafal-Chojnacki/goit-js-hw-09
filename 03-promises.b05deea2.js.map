{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEC,MAAKC,EAAOC,SAASC,cAAc,QAC9BC,EAAcF,SAASC,cAAc,wBACrCE,EAAaH,SAASC,cAAc,uBACpCG,EAAYJ,SAASC,cAAc,sBAGvCF,EAAGM,iBAAiB,UAAUC,IAC9BA,EAAMC,iBAGJ,MAAIC,EAASC,SAASP,EAAYQ,OAC9BC,EAAQF,SAASN,EAAWO,OAC5BE,EAAOH,SAASL,EAAUM,OAGlC,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACT,MAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAS,C,SAAET,E,MAAUC,GAEvBK,GACFI,EAAA3B,GAAS4B,OAAOC,QAAQ,qBAAqBZ,QAAeC,OAC5DE,EAAQM,KAERC,EAAA3B,GAAS4B,OAAOE,QAAQ,oBAAoBb,QAAeC,OAC3DG,EAAOK,G,GAERR,EAAM,G,CAKX,IAAK,IAAIa,EAAI,EAAGA,GAAKpB,EAAQoB,IAAK,CAGhBf,EAFCe,EACIjB,GAASiB,EAAI,GAAKhB,GAG/BiB,MAAKN,IACXO,QAAQC,IAAI,WAAWR,EAAOT,4BAA4BS,EAAOR,UAAU,IAC1EiB,OAAMC,IACPH,QAAQC,IAAI,WAAWE,EAAMnB,2BAA2BmB,EAAMlB,UAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n// Pobranie elementów formularza\nconst form = document.querySelector('form');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\n\n// Obsługa zdarzenia wysłania formularza\nform.addEventListener('submit', event => {\n  event.preventDefault();\n\n  // Pobranie wartości z pól formularza\n  const amount = parseInt(amountInput.value);\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n\n  // Funkcja tworząca obietnicę\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      const result = { position, delay };\n\n      if (shouldResolve) {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        resolve(result);\n      } else {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        reject(result);\n      }\n    }, delay);\n  });\n}\n\n  // Utworzenie i wykonanie obietnic\n  for (let i = 1; i <= amount; i++) {\n    const position = i;\n    const promiseDelay = delay + (i - 1) * step;\n    const promise = createPromise(position, promiseDelay);\n\n    promise.then(result => {\n      console.log(`Promise ${result.position} fulfilled after ${result.delay}ms`);\n    }).catch(error => {\n      console.log(`Promise ${error.position} rejected after ${error.delay}ms`);\n    });\n  }\n});\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","addEventListener","event","preventDefault","amount","parseInt","value","delay1","step","createPromise","position","delay","Promise","resolve","reject","setTimeout","shouldResolve","Math","random","result","$parcel$interopDefault","Notify","success","failure","i","then","console","log","catch","error"],"version":3,"file":"03-promises.b05deea2.js.map"}