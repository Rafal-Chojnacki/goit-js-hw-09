{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEC,MAAKC,EAAOC,SAASC,cAAc,QAC9BC,EAAcF,SAASC,cAAc,wBACrCE,EAAaH,SAASC,cAAc,uBACpCG,EAAYJ,SAASC,cAAc,sBAGvCF,EAAGM,iBAAiB,UAAUC,IAC9BA,EAAMC,iBAGJ,MAAIC,EAASC,SAASP,EAAYQ,OAC9BC,EAAQF,SAASN,EAAWO,OAC5BE,EAAOH,SAASL,EAAUM,OAGhC,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACT,MAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAS,C,SAAET,E,MAAUC,GAEvBK,EACFH,EAAQM,GAERL,EAAOK,EAAO,GAEfR,EAAM,G,CAKb,IAAK,IAAIS,EAAI,EAAGA,GAAKhB,EAAQgB,IAAK,CAGhBX,EAFCW,EACIb,GAASa,EAAI,GAAKZ,GAIpCa,MAAKF,IACJG,EAAA7B,GAAS8B,OAAOC,QACd,qBAAqBL,EAAOT,eAAeS,EAAOR,UACnD,IAEFc,OAAMC,IACLJ,EAAA7B,GAAS8B,OAAOI,QACd,oBAAoBD,EAAMhB,eAAegB,EAAMf,UAChD,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n// Pobranie elementów formularza\nconst form = document.querySelector('form');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\n\n// Obsługa zdarzenia wysłania formularza\nform.addEventListener('submit', event => {\n  event.preventDefault();\n\n  // Pobranie wartości z pól formularza\n  const amount = parseInt(amountInput.value);\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n\n  // Funkcja tworząca obietnicę\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const shouldResolve = Math.random() > 0.3;\n        const result = { position, delay };\n\n        if (shouldResolve) {\n          resolve(result);\n        } else {\n          reject(result);\n        }\n      }, delay);\n    });\n  }\n\n  // Utworzenie i wykonanie obietnic\n  for (let i = 1; i <= amount; i++) {\n    const position = i;\n    const promiseDelay = delay + (i - 1) * step;\n    const promise = createPromise(position, promiseDelay);\n\n    promise\n      .then(result => {\n        Notiflix.Notify.success(\n          `Fulfilled promise ${result.position} in ${result.delay}ms`\n        );\n      })\n      .catch(error => {\n        Notiflix.Notify.failure(\n          `Rejected promise ${error.position} in ${error.delay}ms`\n        );\n      });\n  }\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","addEventListener","event","preventDefault","amount","parseInt","value","delay1","step","createPromise","position","delay","Promise","resolve","reject","setTimeout","shouldResolve","Math","random","result","i","then","$parcel$interopDefault","Notify","success","catch","error","failure"],"version":3,"file":"03-promises.f7d73e32.js.map"}